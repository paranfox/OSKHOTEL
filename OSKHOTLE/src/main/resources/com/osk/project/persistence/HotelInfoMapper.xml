<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mapper XML 설정 태그 -->

<!-- namespace : 연결할 Mapper 인터페이스 경로 및 이름 -->
<mapper namespace="com.osk.project.persistence.HotelInfoMapper"> <!-- mapper랑 경로랑 이름이 똑같아야 함 -->

	<!-- <resultMap> : DB 쿼리 반환 데이터와 Entity 클래스의 멤버 변수 매핑을 정의하는 태그 - 속성 type 
		: 연결할 클래스 id : SQL 쿼리 정의 태그에서 인식되는 이름 -->
	<resultMap type="com.osk.project.domain.HotelInfoVO" id="hotelinfoResultMap">

		<!-- <id> : key 컬럼 매핑 태그 <result> : 컬럼 매핑 태그 - 속성 property : Entity 멤버 
			변수 column : DB 테이블 컬럼 -->
		<id property="hotelNo" column="HOTEL_NO" />
		<result property="lodgingType" column="LODGING_TYPE" />
		<result property="hotelAdmin" column="HOTEL_ADMIN" />
		<result property="hotelName" column="HOTEL_NAME" />
		<result property="hotelYear" column="HOTEL_YEAR" />
		<result property="hotelAddress" column="HOTEL_ADDRESS" />
		<result property="hotelAddressDetail" column="HOTEL_ADDRESS_DETAIL" />
		<result property="hotelLatitude" column="HOTEL_LATITUDE" />
		<result property="hotelLongitude" column="HOTEL_LONGITUDE" />

	</resultMap>

	<resultMap type="com.osk.project.domain.CountryVO" id="countryResultMap">
		<id property="countryNo" column="COUNTRY_NO" />
		<result property="countryName" column="COUNTRY_NAME" />
	</resultMap>

	<resultMap type="com.osk.project.domain.CityVO" id="cityResultMap">
		<id property="countryNo" column="COUNTRY_NO" />
		<result property="cityName" column="CITY_NAME" />
	</resultMap>
	<!-- <select>, <insert>, <update>, <delete> : SQL 쿼리 정의 태그 - 속성 id : Mapper 
		인터페이스 메서드 매핑 역할. resultMap : 쿼리 결과를 resultMap에 매핑. <resultMap> 태그의 id를 적용 
		resultType : 쿼리 결과를 클래스에 매핑 -->


	<insert id="insert"> <!-- id가 insert랑 같아야 함 -->
		<!-- 호텔 등록 -->
		INSERT INTO HOTEL_INFO
		(HOTEL_NO, LODGING_TYPE, HOTEL_ADMIN, HOTEL_NAME, HOTEL_YEAR, 
		HOTEL_ADDRESS, HOTEL_ADDRESS_DETAIL, HOTEL_LATITUDE, HOTEL_LONGITUDE)
		VALUES (HOTEL_INFO_SEQ.NEXTVAL, #{lodgingType}, #{hotelAdmin}, #{hotelName}, #{hotelYear}, 
		#{hotelAddress}, #{hotelAddressDetail}, #{hotelLatitude}, #{hotelLongitude})
	</insert>
	<!-- #{변수명} : Mapper 인터페이스 메소드 매개변수와 매핑되어 전송된 데이터를 적용 -->

	<select id="selectList" resultMap="hotelinfoResultMap"> <!-- MAPPING 한것 -->
		<!-- 호텔 조회 -->
		SELECT * FROM HOTEL_INFO ORDER BY HOTEL_NO DESC
		<!-- HOTEL_NO, HOTEL_NAME, HOTEL_YEAR, HOTEL_ROOM_NO, HOTEL_DETAIL, HOTEL_ADDRESS, 
			HOTEL_LATITUDE, HOTEL_LONGITUDE, HOTEL_SCOREAYG, LODGING -->
	</select>
	
	<!-- 도시별 호텔 조회 -->
	<select id="selectListByCity" resultMap="hotelinfoResultMap">
		SELECT * FROM HOTEL_INFO WHERE HOTEL_ADDRESS LIKE '%'||#{cityName}||'%'
	</select>
	
	<!-- 특정 호텔 조회 -->
	<select id="selectOne" resultMap="hotelinfoResultMap">
		SELECT * FROM HOTEL_INFO WHERE HOTEL_NO = #{hotelNo}
	</select>

	<!-- 특정 호텔 수정 -->
	<update id="update">
		UPDATE HOTEL_INFO 
		SET HOTEL_NAME = #{hotelName},
			HOTEL_YEAR = #{hotelYear},
			HOTEL_ADDRESS = #{hotelAddress},
			HOTEL_ADDRESS_DETAIL = #{hotelAddressDetail},
			HOTEL_LATITUDE = #{hotelLatitude},
			HOTEL_LONGITUDE = #{hotelLongitude}
		WHERE HOTEL_ID = #{hotelNo}
	</update>

	<!-- 특정 호텔 삭제 -->
	<delete id="delete">
		DELETE HOTEL_INFO
		WHERE HOTEL_NO = #{hotelNo}
	</delete>
	
	<!-- 키워드(도시)기반 페이징 처리 필요(+본인 등록 숙소 관리페이지에서도 사용시 추가 SQL 작성 필요) -->
	<select id="selectListByPagination" resultMap="hotelinfoResultMap">
		SELECT * FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY HOTEL_ID DESC) AS RN, HOTEL_INFO.*
		FROM HOTEL_INFO
		)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>

	<!-- resultType : 쿼리 결과를 자바 객체에 매핑하기 위해 사용 -->
	<!-- Type은 참조타입을 넣어야 한다. 그리고 반환이 1개라고 map을 안씀 -->
	<select id="selectTotalCount" resultType="Integer">
		SELECT COUNT(*)
		TOTAL_COUNT FROM BOARD
	</select>

	<select id="getAllCountry" resultMap="countryResultMap">
		SELECT * FROM COUNTRY
	</select>

	<select id="getAllCity" resultMap="cityResultMap">
		SELECT * FROM CITY
		WHERE COUNTRY_NO = #{countryNo}
	</select>

</mapper>

